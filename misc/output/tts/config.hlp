# --- ROCK-COPYRIGHT-NOTE-BEGIN ---
# 
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# Please add additional copyright information _after_ the line containing
# the ROCK-COPYRIGHT-NOTE-END tag. Otherwise it might get removed by
# the ./scripts/Create-CopyPatch script. Do not edit this copyright text!
# 
# ROCK Linux: rock-src/misc/output/tts/config.hlp
# ROCK Linux is Copyright (C) 1998 - 2006 Clifford Wolf
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version. A copy of the GNU General Public
# License can be found at Documentation/COPYING.
# 
# Many people helped and are helping developing ROCK Linux. Please
# have a look at http://www.rocklinux.org/ and the Documentation/TEAM
# file for details.
# 
# --- ROCK-COPYRIGHT-NOTE-END ---


ROCKCFG_OUTPUT_TTS_SYSTEM
  Please select which Text-to-Speech system to use

ROCKCFG_OUTPUT_TTS_FLITE
  Please supply the full, absolute location of your flite executable,
  in most cases, this file is in /usr/bin/flite (rock package: flite)
 
ROCKCFG_OUTPUT_TTS_MBROLA
  Please supply the full, absolute location of your mbrola executable,
  in most cases, if installed manually, this file is called mbrola-
  linux-i386.
 
ROCKCFG_OUTPUT_TTS_VOICEFILE
  Please supply the full, absolute location of your desired voicefile.
  Yes, this is the huge file you waited so long to download for. It
  is suggested to use an english/american voice, as ROCK Linux build
  output will be mostly english (but you can adjust some parts for 
  your language below)

ROCKCFG_OUTPUT_TTS_TXT2PHO
  Please supply the full, absolute location of your text-to-pho converter
  program. This program should be able to read text input from STDIN and
  write .pho output on STDOUT, so texts can be 'piped through'. The most
  common program for german voices for this, as far as i know, is txt2pho.

ROCKCFG_OUTPUT_TTS_PLAY
  Please supply the full, absolute location of your console wave file
  player of choice. It should be able to read it's input from STDIN, 
  any output on STDOUT of the program will be discarded. I suggest using
  the 'play' utility that comes with the sox package, if you are using 
  OSS, or 'aplay' from the alsa-utils package, if you prefer ALSA.

ROCKCFG_OUTPUT_TTS_ENABLE_HEADER
  This class of messages looks like, for example:
  
  	"Building cross binutils and cc for ${arch_target} ..."
	
  and would be read out exactly like this. So, if you plan to use a non-
  english voice, you wouldn't want this to be read.

ROCKCFG_OUTPUT_TTS_ENABLE_STATUS
  This class of messages looks like, for exmaple:
  
  	"writing build log to src.cross.$id/binutils.log."
	
  and would be read out exactly like this. So, if you plan to use a non-
  english voice, you wouldn't want this to be read.

ROCKCFG_OUTPUT_TTS_ENABLE_ERROR
  This class of messages looks like, for example:
  
  	"Detected a problem with the flist wrapper lib on your system"
	
  and would be read out exactly like this. So, again, if you plan to use
  a non-english voice, you pobably wouldn't be too happy with the result.

ROCKCFG_OUTPUT_TTS_ENABLE_PKG_DENY
  This class of message is issued when a package build is categorically 
  denied before even the tarball is touched. Common examples are trying
  to build e17 without imlib2 having compiled. The hook for this class 
  of messages provides 3 arguments:
  
  	$1	the current stagelevel
	$2	the current package-name
	$3	the reason why this package got refused

  You can use these in the free configurable text, as shown in the 
  example text. Note, however, that for a text in a non-english language
  you might want to leave $3 out, as the reason is in english usually.

ROCKCFG_OUTPUT_TTS_TXT_PKG_DENY
  Please have a look at the help of ROCKCFG_OUTPUT_TTS_ENABLE_PKG_DENY.

ROCKCFG_OUTPUT_TTS_ENABLE_PKG_START
  This class of message is issued when a package build is started.
  The hook for this class of messages provides 5 arguments:
  
  	$1	the current stagelevel
	$2	the current package's repository
	$3	the current package-name
	$4	the ROCK Linux version, for example 2.0.0
	$5	the ROCK Linux extraversion, e.g. -rc1

  You can use these in the free configurable text, as shown in the 
  example text.

ROCKCFG_OUTPUT_TTS_TXT_PKG_START
  Please have a look at the help of ROCKCFG_OUTPUT_TTS_ENABLE_PKG_START.

ROCKCFG_OUTPUT_TTS_ENABLE_PKG_FINISH
  This class of message is issued when a package build is finished.
  The hook for this class of messages provides 3 arguments:
  
  	$1	the current stagelevel
	$2	the current package's repository
	$3	the current package-name

  You can use these in the free configurable text, as shown in the 
  example text.

ROCKCFG_OUTPUT_TTS_TXT_PKG_FINISH
  Please have a look at the help of ROCKCFG_OUTPUT_TTS_ENABLE_PKG_FINISH.

ROCKCFG_OUTPUT_TTS_ENABLE_PKG_ABORT
  This class of message is issued when a package build is aborted.
  The hook for this class of messages provides 3 arguments:
  
  	$1	the current stagelevel
	$2	the current package's repository
	$3	the current package-name

  You can use these in the free configurable text, as shown in the 
  example text.

ROCKCFG_OUTPUT_TTS_TXT_PKG_ABORT
  Please have a look at the help of ROCKCFG_OUTPUT_TTS_ENABLE_PKG_ABORT.

ROCKCFG_OUTPUT_TTS_ENABLE_ERRORQUOTE
  This class of message is usually used to quote the last few lines of a
  logfile to let you probably guess the reason of a failed build without
  the need to open the logfile. This is not ment to be read out (not even
  by humans), but you can replace the text with a generic, severe error
  message in your preferred message (as the example shows). The log
  excerpt will be readable on console as usual. However, if you intend to
  produce some weird noise, any argument given is to be interpreted as
  logfile content (so, use $*, if you want it all).

ROCKCFG_OUTPUT_TTS_TXT_ERRORQUOTE
  Please have a look at the help of ROCKCFG_OUTPUT_TTS_ENABLE_ERRORQUOTE.

ROCKCFG_OUTPUT_TTS_SAYPROG
  Please have a look at the help of ROCKCFG_OUTPUT_TTS_OWNSCRIPT.

ROCKCFG_OUTPUT_TTS_USEFESTIVAL
  Select this, if you have installed the festival tts system. The festival 
  system is major to mbrola with regards to it's licence, mbrola is binary-
  only, whereas festival is licensed under an OSI-approved licences.

ROCKCFG_OUTPUT_TTS_FESTIVAL
  Please supply the full, absolute location of your 'festival' binary.
