# --- ROCK-COPYRIGHT-NOTE-BEGIN ---
# 
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# Please add additional copyright information _after_ the line containing
# the ROCK-COPYRIGHT-NOTE-END tag. Otherwise it might get removed by
# the ./scripts/Create-CopyPatch script. Do not edit this copyright text!
# 
# ROCK Linux: rock-src/package/blindcoder/dovecot/gnutls-upd.patch
# ROCK Linux is Copyright (C) 1998 - 2006 Clifford Wolf
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# 
# --- ROCK-COPYRIGHT-NOTE-END ---

--- ./src/login-common/ssl-proxy-gnutls.c.orig	2004-09-07 00:52:38.735148640 +0200
+++ ./src/login-common/ssl-proxy-gnutls.c	2004-09-07 01:01:43.871275352 +0200
@@ -516,12 +516,8 @@
 			certfile, keyfile, gnutls_strerror(ret));
 	}
 
-        ret = gnutls_certificate_set_dh_params(x509_cred, dh_params);
-	if (ret < 0)
-		i_fatal("Can't set DH parameters: %s", gnutls_strerror(ret));
-	ret = gnutls_certificate_set_rsa_params(x509_cred, rsa_params);
-	if (ret < 0)
-		i_fatal("Can't set RSA parameters: %s", gnutls_strerror(ret));
+        gnutls_certificate_set_dh_params(x509_cred, dh_params);
+	gnutls_certificate_set_rsa_export_params(x509_cred, rsa_params);
 
         ssl_proxies = hash_create(default_pool, default_pool, 0, NULL, NULL);
 	ssl_initialized = TRUE;
--- ./src/login-common/ssl-proxy-gnutls.c.orig	2004-09-07 01:11:41.309450944 +0200
+++ ./src/login-common/ssl-proxy-gnutls.c	2004-09-07 01:14:11.235658696 +0200
@@ -276,7 +276,7 @@
 		return;
 
 	/* i/o interrupted */
-	dir = gnutls_handshake_get_direction(proxy->session) == 0 ?
+	dir = gnutls_record_get_direction(proxy->session) == 0 ?
 		IO_READ : IO_WRITE;
 	if (proxy->io_ssl_dir != dir) {
 		if (proxy->io_ssl != NULL)
@@ -298,7 +298,7 @@
 	gnutls_compression_set_priority(session, comp_priority);
 	gnutls_kx_set_priority(session, kx_priority);
 	gnutls_mac_set_priority(session, mac_priority);
-	gnutls_cert_type_set_priority(session, cert_type_priority);
+	gnutls_certificate_type_set_priority(session, cert_type_priority);
 
 	gnutls_cred_set(session, GNUTLS_CRD_CERTIFICATE, x509_cred);
 	return session;
@@ -504,8 +504,8 @@
 
 	read_parameters(paramfile);
 
-	if ((ret = gnutls_certificate_allocate_cred(&x509_cred)) < 0) {
-		i_fatal("gnutls_certificate_allocate_cred() failed: %s",
+	if ((ret = gnutls_certificate_allocate_credentials(&x509_cred)) < 0) {
+		i_fatal("gnutls_certificate_allocate_credentials() failed: %s",
 			gnutls_strerror(ret));
 	}
 
@@ -537,7 +537,7 @@
 	hash_foreach(ssl_proxies, ssl_proxy_destroy_hash, NULL);
 	hash_destroy(ssl_proxies);
 
-	gnutls_certificate_free_cred(x509_cred);
+	gnutls_certificate_free_credentials(x509_cred);
 	gnutls_global_deinit();
 }
 
