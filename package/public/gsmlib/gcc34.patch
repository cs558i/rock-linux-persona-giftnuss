# --- ROCK-COPYRIGHT-NOTE-BEGIN ---
# 
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# Please add additional copyright information _after_ the line containing
# the ROCK-COPYRIGHT-NOTE-END tag. Otherwise it might get removed by
# the ./scripts/Create-CopyPatch script. Do not edit this copyright text!
# 
# ROCK Linux: rock-src/package/public/gsmlib/gcc34.patch
# ROCK Linux is Copyright (C) 1998 - 2006 Clifford Wolf
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# 
# --- ROCK-COPYRIGHT-NOTE-END ---

--- gsmlib-1.10/gsmlib/gsm_unix_serial.h~	2002-09-22 13:51:10.000000000 +0200
+++ gsmlib-1.10/gsmlib/gsm_unix_serial.h	2004-03-14 04:16:26.000000000 +0100
@@ -13,6 +13,7 @@
 #ifndef GSM_UNIX_SERIAL_H
 #define GSM_UNIX_SERIAL_H
 
+#include <cassert>
 #include <string>
 #include <gsmlib/gsm_error.h>
 #include <gsmlib/gsm_port.h>
--- gsmlib-1.10/gsmlib/gsm_map_key.h.orig	Wed May 15 04:38:12 2002
+++ gsmlib-1.10/gsmlib/gsm_map_key.h	Wed Aug 18 22:19:20 2004
@@ -25,6 +25,16 @@
 
   // wrapper for map key, can access Sortedtore to get sortOrder()
 
+  template <class SortedStore> class MapKey;
+  
+  // compare two keys
+  template <class SortedStore>
+    extern bool operator<(const MapKey<SortedStore> &x,
+                          const MapKey<SortedStore> &y);
+  template <class SortedStore>
+    extern bool operator==(const MapKey<SortedStore> &x,
+                           const MapKey<SortedStore> &y);
+  
   template <class SortedStore> class MapKey
   {
     SortedStore &_myStore;   // my store
@@ -61,14 +71,6 @@
                        const MapKey<SortedStore> &y);
   };
 
-  // compare two keys
-  template <class SortedStore>
-    extern bool operator<(const MapKey<SortedStore> &x,
-                          const MapKey<SortedStore> &y);
-  template <class SortedStore>
-    extern bool operator==(const MapKey<SortedStore> &x,
-                           const MapKey<SortedStore> &y);
-  
   // MapKey members
   
   template <class SortedStore>
