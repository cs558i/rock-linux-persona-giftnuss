#!/bin/bash

### IN: base
### IN: download
### IN: desc_D
### IN: builddir
### OUT: archdir
### CHANNEL 202
build_setup_archdir () {
    archdir="$builddir/archdir"
    mkdir -p $archdir

    # Download archives files and link to them in $archdir.
    while read l_cksum l_srctar l_url l_flags ; do
        [ -z "$l_cksum" ] && continue
        x=`source_file l_cksum $l_srctar l_url $l_flags`
        if [ ! -f $x ]; then
            if [ $download = 1 ] ; then
                echo_status "Running ./scripts/Download for this package..."
                echo_status "----- DOWNLOAD LOG -----"
                echo; ./scripts/Download $xpkg; echo
                echo_status "------------------------"
                download=0
            fi >&202 2>&1
            if [ ! -f $x ]; then
                echo "File not found: ${x#$base/}"
                abort "Did you run ./scripts/Download for this package?"
            fi
        fi
        ln -vs $x "$archdir/"
    done < <( echo "$desc_D" | column_clean )
}

### IN: desc_SRC
### IN: desc_D
### IN: srctar
### OUT: xsourceballs
build_set_sourceballs () {
    local sourceballs=""
    if [ ".$desc_SRC" == "." ] ; then
        # Autodetect source tar and extract it
        #
        if [ "$srctar" = "auto" ] ; then
            xsourceballs=$( echo "$desc_D" | head -n 1 | tr ' ' '\t' | tr -s '\t' | \
                cut -f2 | sed 's,.\(t\?\)\(gz\|Z\)$,.\1bz2,' )
            if [ -z "$xsourceballs" ] ; then
                echo "Can't auto-detect srctar for package '$xpkg'!"
                [ $autoextract = 1 ] && false
            fi
        else
            xsourceballs="$srctar"
        fi
    else
        sourceballs=$( echo "$desc_D" | tr ' ' '\t' | tr -s '\t' | \
            cut -f2 | sed 's,.\(t\?\)\(gz\|Z\)$,.\1bz2,' )
        xsrcpattern=$( echo "$desc_SRC" | tr ' ' '\t' | tr -s '\t' | tr '\t' '\n' )
        xsourceballs=$( echo "$sourceballs" | grep -F "$xsrcpattern" )
    fi
}

### DIR: $builddir
### IN: archdir -- directory containing the package tar files (download/..)
### IN: xsrctar -- current source tarball
### FILE: untar.txt
### FILE: xsrcdir.txt
build_autoextract_source () {
    local extractcmd=""
    local cutcmd=""
    if [[ $xsrctar == *.zip ]] ; then
        extractcmd="unzip"
        cutcmd="cut -f1 -d/ | cut -f2 -d:"
    else
        extractcmd="tar -v $taropt"
        cutcmd="cut -f1 -d/"
    fi
    echo "Extracting $xsrctar ($extractcmd) ... "
    $extractcmd $archdir/$xsrctar | tee untar.txt |
        eval $cutcmd | sort -u > xsrcdir.txt
}

# Main program for building a package
#
build_this_package() {
    build_set_sourceballs

    for xsrctar in $xsourceballs; do
        saved_patchfiles="$patchfiles"
        var_append patchfiles " " \
                   "`ls $confdir/*.patch.${xsrctar/-[0-9]*/} 2> /dev/null`"

        if [ $autoextract = 1 ]; then
            cd $builddir
            build_autoextract_source

            #
            if [ $srcdir = auto ]; then
                xsrcdir=${xsrctar%.tar.bz2}
                xsrcdir=${xsrcdir%.tbz2}
                xsrcdir=${xsrcdir%.zip}
                if [ ! -d $xsrcdir ] ; then
                    for x in $pkg-$ver ${pkg}_$ver $pkg \
                             $xpkg-$ver ${xpkg}_$ver $xpkg \
                             $( cat xsrcdir.txt )
                    do
                        [ -d "$x" ] && xsrcdir="$x"
                    done
                fi
            else
                xsrcdir="$srcdir"
            fi
            #
            if [ "$chownsrcdir" = 1 ]; then
                echo "Fixing ownership and permissions ..."
                chown -R 0:0 $builddir/$xsrcdir
            fi
            #
            if [ "$nocvsinsrcdir" = 1 ]; then
                echo "Removing CVS and .svn directories ..."
                egrep '(^|/)(CVS|\.svn)(/|$)' untar.txt |
                while read x; do
                    echo "Removing $x ..."
                    rm -rf "$x"
                done
            fi
            #
            echo "Changeing into $builddir/$xsrcdir ..."
            cd $builddir/$xsrcdir

            # Apply patches
            #
            if [ $autopatch = 1 ]; then
                hook_eval prepatch
                apply_patchfiles
                hook_eval postpatch
            fi

        else
            cd $builddir
        fi

        if [ "$createprefix" = 1 ]; then
            echo "Creating $root/$prefix/<..> if required ..."
            for x in $root/$prefix $bindir $sbindir $libdir $datadir $includedir \
                     $docdir $infodir $mandir $sysconfdir $localstatedir
            do
                if [ ! -e $x ]; then
                    mkdir -vp $x
                    rmemptydir="$x $rmemptydir"
                fi
            done
        fi

        if [ ".$custmain" = "." ]
        then

            # Run configure scripts etc.
            #
            hook_eval preconf
            #
            if [ $runcmake = 1 -a -f $cmakesrcdir/CMakeLists.txt -a -n "$( type -p cmake )" ]
            then
                    mkdir rock-cmake-build
                    cd rock-cmake-build
                cmake $cmakedefs ../$cmakesrcdir
            elif [ $runconf = 1 ]; then
              if [ -n "$( type -p $configscript )" -o $autogen = 1 ]
              then
                eval_config_command $( eval echo $confopt )
              fi
            fi

            # automated package build

            # styles without make run first:
            if [ -f setup.py -a $runpysetup = 1 ] ; then
                pyconfopt="${pyconfopt:=--prefix $root/$prefix}"
                eval python setup.py build install $pyconfopt
            elif [ ! -f Makefile -a ! -f makefile -a \
                   -f Build.PL -a $runbuildpl = 1 ] ; then
                    perl Build.PL --installdirs perl
                perl Build
                perl Build install
            else # styles that include a make run
                if [ ! -f Makefile -a ! -f makefile -a \
                     -f Makefile.PL -a $runmkpl = 1 ]; then
                    sed -i 's/auto_install/# &/' Makefile.PL
                    perl Makefile.PL INSTALLDIRS=perl
                fi
                #
                if [ ! -f Makefile -a ! -f makefile -a \
                     -f Imakefile -a $runxmkmf = 1 ]; then
                    xmkmf -a
                fi
                #
                # Build it
                #
                hook_eval premake
                    run_make_with_options
                hook_eval inmake
                if [ "$makeinstopt" ]
                then
                    eval echo "Running: $MAKE ${makeinstopt//\"/\\\"}"
                    eval "$MAKE $makeinstopt"; fi
                hook_eval postmake
            fi
        else
            eval "$custmain"
            for x in preconf premake inmake postmake; do
                if eval "[ -n \"\$hookdirty_$x\" ]"; then
                    echo "Hook $x is still marked as dirty ..."
                    hook_eval $x
                fi
            done
        fi

        if [ "$createdocs" != 0 ]; then
            if [ ! -e $docdir ]; then
                mkdir -p $docdir
                rmemptydir="$rmemptydir $docdir"
            fi
            [ -z "$createdocs" ] && createdocs="$ROCKCFG_CREATE_DOCS"
        fi

        [ -n "${desktopfiles}" ] && for file in ${desktopfiles} ; do
            [ -f $file ] || continue

            echo -n "Install desktop file '$file': "

            mkdir -p $root/usr/share/applications

            rock_substitute $file > \
              $root/usr/share/applications/`basename $file`
        done

        if [ -f $confdir/postinstall.sh.$xpkg ] ; then
            echo "Installing postinstall file $confdir/postinstall.sh.$xpkg"
            mkdir -p $root/etc/postinstall

            rock_substitute $confdir/postinstall.sh.$xpkg > \
              $root/etc/postinstall/$xpkg-postinstall.sh
        elif [ -f $confdir/postinstall.sh -a "$pkg" != "$xpkg" ] ; then
            echo_error "forked package $xpkg from $pkg"
            echo_error "but only found a 'postinstall.sh'"
            echo_error "please create a 'postinstall.sh.$xpkg'"
        elif [ -f $confdir/postinstall.sh ] ; then
            echo "Installing postinstall file $confdir/postinstall.sh"
            mkdir -p $root/etc/postinstall

            rock_substitute $confdir/postinstall.sh > \
              $root/etc/postinstall/$pkg-postinstall.sh
        fi

        if [ "$createdocs" = 1 ]; then
            echo "Trying to copy the default documentation ..."
            [ -d $builddir/$xsrcdir ] && cd $builddir/$xsrcdir
            for x in `find -type d \( -name 'doc' -o -name 'docs' -o \
                       -name '[Dd]ocumentation' \) ! -empty`
            do
                if [ -d "$x" -a "`echo $x/*`" != "$x/*" ]
                then cp -rLv $x/* $docdir || true ; fi
            done
            for x in [A-Z][A-Z]* *.lsm ChangeLog*; do
                [ "${x#*.[cho0-9]}" ] || continue
                [ "${x#*.info*}"    ] || continue
                if [ -f $x ] ; then cp -v $x $docdir/$x ; fi
            done
            for x in $confdir/*.doc; do
                if [ -f $x ]; then cp -v $x $docdir/${x%.doc}; fi
            done
            find $docdir/ -name '*.[0-9]' -o -name '*.info*' \
                -o -name '[Mm]akefile*' | \
                xargs -r rm -f 2> /dev/null || true
            find $docdir/* -type d -empty 2> /dev/null | \
                xargs -r rmdir 2> /dev/null || true
        fi

        hook_eval postdoc
        patchfiles="$saved_patchfiles"
    done

    for x in $rmemptydir; do
        rmdir -v --ignore-fail-on-non-empty $x || true
        # Remove symlinks to nonexistent files.
        [ -e $x ] || rm $x 2> /dev/null || true
    done

    return 0
}

